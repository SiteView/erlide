%%------------------------------------------------------------
%%
%% Implementation stub file
%% 
%% Target: emsMgr_EMSMgr_I
%% Source: d:/corba/idl/emsMgr.idl
%% IC vsn: 4.2.25
%% 
%% This file is automatically generated. DO NOT EDIT IT.
%%
%%------------------------------------------------------------

-module(emsMgr_EMSMgr_I).
-ic_compiled("4_2_25").


%% Interface functions
-export([getEMS/1, getEMS/2, getAllTopLevelSubnetworks/2]).
-export([getAllTopLevelSubnetworks/3, getAllTopLevelSubnetworkNames/2, getAllTopLevelSubnetworkNames/3]).
-export([getAllTopLevelTopologicalLinks/2, getAllTopLevelTopologicalLinks/3, getAllTopLevelTopologicalLinkNames/2]).
-export([getAllTopLevelTopologicalLinkNames/3, getTopLevelTopologicalLink/2, getTopLevelTopologicalLink/3]).
-export([getAllEMSAndMEActiveAlarms/4, getAllEMSAndMEActiveAlarms/5, getAllEMSSystemActiveAlarms/3]).
-export([getAllEMSSystemActiveAlarms/4, getObjectRootAlarms/5, getObjectRootAlarms/6]).
-export([getObjectClockSourceStatus/2, getObjectClockSourceStatus/3, acknowledgeAlarms/2]).
-export([acknowledgeAlarms/3]).

%% Exports from "common::Common_I"
-export([setNativeEMSName/3, setNativeEMSName/4, setUserLabel/4]).
-export([setUserLabel/5, setOwner/3, setOwner/4]).
-export([getCapabilities/1, getCapabilities/2, setAdditionalInfo/3]).
-export([setAdditionalInfo/4]).

%% Type identification function
-export([typeID/0]).

%% Used to start server
-export([oe_create/0, oe_create_link/0, oe_create/1]).
-export([oe_create_link/1, oe_create/2, oe_create_link/2]).

%% TypeCode Functions and inheritance
-export([oe_tc/1, oe_is_a/1, oe_get_interface/0]).

%% gen server export stuff
-behaviour(gen_server).
-export([init/1, terminate/2, handle_call/3]).
-export([handle_cast/2, handle_info/2, code_change/3]).

-include_lib("orber/include/corba.hrl").


%%------------------------------------------------------------
%%
%% Object interface functions.
%%
%%------------------------------------------------------------



%%%% Operation: getEMS
%% 
%%   Returns: RetVal, EmsInfo
%%   Raises:  globaldefs::ProcessingFailureException
%%
getEMS(OE_THIS) ->
    corba:call(OE_THIS, getEMS, [], ?MODULE).

getEMS(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, getEMS, [], ?MODULE, OE_Options).

%%%% Operation: getAllTopLevelSubnetworks
%% 
%%   Returns: RetVal, SList, SIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
getAllTopLevelSubnetworks(OE_THIS, How_many) ->
    corba:call(OE_THIS, getAllTopLevelSubnetworks, [How_many], ?MODULE).

getAllTopLevelSubnetworks(OE_THIS, OE_Options, How_many) ->
    corba:call(OE_THIS, getAllTopLevelSubnetworks, [How_many], ?MODULE, OE_Options).

%%%% Operation: getAllTopLevelSubnetworkNames
%% 
%%   Returns: RetVal, NameList, NameIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
getAllTopLevelSubnetworkNames(OE_THIS, How_many) ->
    corba:call(OE_THIS, getAllTopLevelSubnetworkNames, [How_many], ?MODULE).

getAllTopLevelSubnetworkNames(OE_THIS, OE_Options, How_many) ->
    corba:call(OE_THIS, getAllTopLevelSubnetworkNames, [How_many], ?MODULE, OE_Options).

%%%% Operation: getAllTopLevelTopologicalLinks
%% 
%%   Returns: RetVal, TopoList, TopoIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
getAllTopLevelTopologicalLinks(OE_THIS, How_many) ->
    corba:call(OE_THIS, getAllTopLevelTopologicalLinks, [How_many], ?MODULE).

getAllTopLevelTopologicalLinks(OE_THIS, OE_Options, How_many) ->
    corba:call(OE_THIS, getAllTopLevelTopologicalLinks, [How_many], ?MODULE, OE_Options).

%%%% Operation: getAllTopLevelTopologicalLinkNames
%% 
%%   Returns: RetVal, NameList, NameIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
getAllTopLevelTopologicalLinkNames(OE_THIS, How_many) ->
    corba:call(OE_THIS, getAllTopLevelTopologicalLinkNames, [How_many], ?MODULE).

getAllTopLevelTopologicalLinkNames(OE_THIS, OE_Options, How_many) ->
    corba:call(OE_THIS, getAllTopLevelTopologicalLinkNames, [How_many], ?MODULE, OE_Options).

%%%% Operation: getTopLevelTopologicalLink
%% 
%%   Returns: RetVal, TopoLink
%%   Raises:  globaldefs::ProcessingFailureException
%%
getTopLevelTopologicalLink(OE_THIS, TopoLinkName) ->
    corba:call(OE_THIS, getTopLevelTopologicalLink, [TopoLinkName], ?MODULE).

getTopLevelTopologicalLink(OE_THIS, OE_Options, TopoLinkName) ->
    corba:call(OE_THIS, getTopLevelTopologicalLink, [TopoLinkName], ?MODULE, OE_Options).

%%%% Operation: getAllEMSAndMEActiveAlarms
%% 
%%   Returns: RetVal, EventList, EventIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
getAllEMSAndMEActiveAlarms(OE_THIS, ExcludeProbCauseList, ExcludeSeverityList, How_many) ->
    corba:call(OE_THIS, getAllEMSAndMEActiveAlarms, [ExcludeProbCauseList, ExcludeSeverityList, How_many], ?MODULE).

getAllEMSAndMEActiveAlarms(OE_THIS, OE_Options, ExcludeProbCauseList, ExcludeSeverityList, How_many) ->
    corba:call(OE_THIS, getAllEMSAndMEActiveAlarms, [ExcludeProbCauseList, ExcludeSeverityList, How_many], ?MODULE, OE_Options).

%%%% Operation: getAllEMSSystemActiveAlarms
%% 
%%   Returns: RetVal, EventList, EventIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
getAllEMSSystemActiveAlarms(OE_THIS, ExcludeSeverityList, How_many) ->
    corba:call(OE_THIS, getAllEMSSystemActiveAlarms, [ExcludeSeverityList, How_many], ?MODULE).

getAllEMSSystemActiveAlarms(OE_THIS, OE_Options, ExcludeSeverityList, How_many) ->
    corba:call(OE_THIS, getAllEMSSystemActiveAlarms, [ExcludeSeverityList, How_many], ?MODULE, OE_Options).

%%%% Operation: getObjectRootAlarms
%% 
%%   Returns: RetVal, EventList, EventIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
getObjectRootAlarms(OE_THIS, ObjectName, StartTime, EndTime, How_many) ->
    corba:call(OE_THIS, getObjectRootAlarms, [ObjectName, StartTime, EndTime, How_many], ?MODULE).

getObjectRootAlarms(OE_THIS, OE_Options, ObjectName, StartTime, EndTime, How_many) ->
    corba:call(OE_THIS, getObjectRootAlarms, [ObjectName, StartTime, EndTime, How_many], ?MODULE, OE_Options).

%%%% Operation: getObjectClockSourceStatus
%% 
%%   Returns: RetVal, ClockSourceStatusList
%%   Raises:  globaldefs::ProcessingFailureException
%%
getObjectClockSourceStatus(OE_THIS, ManagedElementName) ->
    corba:call(OE_THIS, getObjectClockSourceStatus, [ManagedElementName], ?MODULE).

getObjectClockSourceStatus(OE_THIS, OE_Options, ManagedElementName) ->
    corba:call(OE_THIS, getObjectClockSourceStatus, [ManagedElementName], ?MODULE, OE_Options).

%%%% Operation: acknowledgeAlarms
%% 
%%   Returns: RetVal, FailedAlarmList
%%   Raises:  globaldefs::ProcessingFailureException
%%
acknowledgeAlarms(OE_THIS, AlarmList) ->
    corba:call(OE_THIS, acknowledgeAlarms, [AlarmList], ?MODULE).

acknowledgeAlarms(OE_THIS, OE_Options, AlarmList) ->
    corba:call(OE_THIS, acknowledgeAlarms, [AlarmList], ?MODULE, OE_Options).

%%%% Operation: setNativeEMSName
%% 
%%   Returns: RetVal
%%   Raises:  globaldefs::ProcessingFailureException
%%
setNativeEMSName(OE_THIS, ObjectName, NativeEMSName) ->
    corba:call(OE_THIS, setNativeEMSName, [ObjectName, NativeEMSName], ?MODULE).

setNativeEMSName(OE_THIS, OE_Options, ObjectName, NativeEMSName) ->
    corba:call(OE_THIS, setNativeEMSName, [ObjectName, NativeEMSName], ?MODULE, OE_Options).

%%%% Operation: setUserLabel
%% 
%%   Returns: RetVal
%%   Raises:  globaldefs::ProcessingFailureException
%%
setUserLabel(OE_THIS, ObjectName, UserLabel, EnforceUniqueness) ->
    corba:call(OE_THIS, setUserLabel, [ObjectName, UserLabel, EnforceUniqueness], ?MODULE).

setUserLabel(OE_THIS, OE_Options, ObjectName, UserLabel, EnforceUniqueness) ->
    corba:call(OE_THIS, setUserLabel, [ObjectName, UserLabel, EnforceUniqueness], ?MODULE, OE_Options).

%%%% Operation: setOwner
%% 
%%   Returns: RetVal
%%   Raises:  globaldefs::ProcessingFailureException
%%
setOwner(OE_THIS, ObjectName, Owner) ->
    corba:call(OE_THIS, setOwner, [ObjectName, Owner], ?MODULE).

setOwner(OE_THIS, OE_Options, ObjectName, Owner) ->
    corba:call(OE_THIS, setOwner, [ObjectName, Owner], ?MODULE, OE_Options).

%%%% Operation: getCapabilities
%% 
%%   Returns: RetVal, Capabilities
%%   Raises:  globaldefs::ProcessingFailureException
%%
getCapabilities(OE_THIS) ->
    corba:call(OE_THIS, getCapabilities, [], ?MODULE).

getCapabilities(OE_THIS, OE_Options) ->
    corba:call(OE_THIS, getCapabilities, [], ?MODULE, OE_Options).

%%%% Operation: setAdditionalInfo
%% 
%%   Returns: RetVal, AdditionalInfo
%%   Raises:  globaldefs::ProcessingFailureException
%%
setAdditionalInfo(OE_THIS, ObjectName, AdditionalInfo) ->
    corba:call(OE_THIS, setAdditionalInfo, [ObjectName, AdditionalInfo], ?MODULE).

setAdditionalInfo(OE_THIS, OE_Options, ObjectName, AdditionalInfo) ->
    corba:call(OE_THIS, setAdditionalInfo, [ObjectName, AdditionalInfo], ?MODULE, OE_Options).

%%------------------------------------------------------------
%%
%% Inherited Interfaces
%%
%%------------------------------------------------------------
oe_is_a("IDL:mtnm.tmforum.org/emsMgr/EMSMgr_I:1.0") -> true;
oe_is_a("IDL:mtnm.tmforum.org/common/Common_I:1.0") -> true;
oe_is_a(_) -> false.

%%------------------------------------------------------------
%%
%% Interface TypeCode
%%
%%------------------------------------------------------------
oe_tc(getEMS) -> 
	{tk_void,[],
            [{tk_struct,"IDL:mtnm.tmforum.org/emsMgr/EMS_T:1.0","EMS_T",
                 [{"name",
                   {tk_sequence,
                       {tk_struct,
                           "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                           "NameAndStringValue_T",
                           [{"name",{tk_string,0}},{"value",{tk_string,0}}]},
                       0}},
                  {"userLabel",{tk_string,0}},
                  {"nativeEMSName",{tk_string,0}},
                  {"owner",{tk_string,0}},
                  {"emsVersion",{tk_string,0}},
                  {"type",{tk_string,0}},
                  {"additionalInfo",
                   {tk_sequence,
                       {tk_struct,
                           "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                           "NameAndStringValue_T",
                           [{"name",{tk_string,0}},{"value",{tk_string,0}}]},
                       0}}]}]};
oe_tc(getAllTopLevelSubnetworks) -> 
	{tk_void,
            [tk_ulong],
            [{tk_sequence,
                 {tk_struct,
                     "IDL:mtnm.tmforum.org/multiLayerSubnetwork/MultiLayerSubnetwork_T:1.0",
                     "MultiLayerSubnetwork_T",
                     [{"name",
                       {tk_sequence,
                           {tk_struct,
                               "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                               "NameAndStringValue_T",
                               [{"name",{tk_string,0}},
                                {"value",{tk_string,0}}]},
                           0}},
                      {"userLabel",{tk_string,0}},
                      {"nativeEMSName",{tk_string,0}},
                      {"owner",{tk_string,0}},
                      {"subnetworkType",
                       {tk_enum,
                           "IDL:mtnm.tmforum.org/multiLayerSubnetwork/Topology_T:1.0",
                           "Topology_T",
                           ["TOPO_SINGLETON","TOPO_CHAIN","TOPO_PSR",
                            "TOPO_OPEN_PSR","TOPO_SPRING","TOPO_OPEN_SPRING",
                            "TOPO_MESH"]}},
                      {"supportedRates",{tk_sequence,tk_short,0}},
                      {"additionalInfo",
                       {tk_sequence,
                           {tk_struct,
                               "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                               "NameAndStringValue_T",
                               [{"name",{tk_string,0}},
                                {"value",{tk_string,0}}]},
                           0}}]},
                 0},
             {tk_objref,
                 "IDL:mtnm.tmforum.org/multiLayerSubnetwork/SubnetworkIterator_I:1.0",
                 "SubnetworkIterator_I"}]};
oe_tc(getAllTopLevelSubnetworkNames) -> 
	{tk_void,
            [tk_ulong],
            [{tk_sequence,
                 {tk_sequence,
                     {tk_struct,
                         "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                         "NameAndStringValue_T",
                         [{"name",{tk_string,0}},{"value",{tk_string,0}}]},
                     0},
                 0},
             {tk_objref,
                 "IDL:mtnm.tmforum.org/globaldefs/NamingAttributesIterator_I:1.0",
                 "NamingAttributesIterator_I"}]};
oe_tc(getAllTopLevelTopologicalLinks) -> 
	{tk_void,
            [tk_ulong],
            [{tk_sequence,
                 {tk_struct,
                     "IDL:mtnm.tmforum.org/topologicalLink/TopologicalLink_T:1.0",
                     "TopologicalLink_T",
                     [{"name",
                       {tk_sequence,
                           {tk_struct,
                               "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                               "NameAndStringValue_T",
                               [{"name",{tk_string,0}},
                                {"value",{tk_string,0}}]},
                           0}},
                      {"userLabel",{tk_string,0}},
                      {"nativeEMSName",{tk_string,0}},
                      {"owner",{tk_string,0}},
                      {"direction",
                       {tk_enum,
                           "IDL:mtnm.tmforum.org/globaldefs/ConnectionDirection_T:1.0",
                           "ConnectionDirection_T",
                           ["CD_UNI","CD_BI"]}},
                      {"rate",tk_short},
                      {"aEndTP",
                       {tk_sequence,
                           {tk_struct,
                               "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                               "NameAndStringValue_T",
                               [{"name",{tk_string,0}},
                                {"value",{tk_string,0}}]},
                           0}},
                      {"zEndTP",
                       {tk_sequence,
                           {tk_struct,
                               "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                               "NameAndStringValue_T",
                               [{"name",{tk_string,0}},
                                {"value",{tk_string,0}}]},
                           0}},
                      {"additionalInfo",
                       {tk_sequence,
                           {tk_struct,
                               "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                               "NameAndStringValue_T",
                               [{"name",{tk_string,0}},
                                {"value",{tk_string,0}}]},
                           0}}]},
                 0},
             {tk_objref,
                 "IDL:mtnm.tmforum.org/topologicalLink/TopologicalLinkIterator_I:1.0",
                 "TopologicalLinkIterator_I"}]};
oe_tc(getAllTopLevelTopologicalLinkNames) -> 
	{tk_void,
            [tk_ulong],
            [{tk_sequence,
                 {tk_sequence,
                     {tk_struct,
                         "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                         "NameAndStringValue_T",
                         [{"name",{tk_string,0}},{"value",{tk_string,0}}]},
                     0},
                 0},
             {tk_objref,
                 "IDL:mtnm.tmforum.org/globaldefs/NamingAttributesIterator_I:1.0",
                 "NamingAttributesIterator_I"}]};
oe_tc(getTopLevelTopologicalLink) -> 
	{tk_void,
            [{tk_sequence,
                 {tk_struct,
                     "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                     "NameAndStringValue_T",
                     [{"name",{tk_string,0}},{"value",{tk_string,0}}]},
                 0}],
            [{tk_struct,
                 "IDL:mtnm.tmforum.org/topologicalLink/TopologicalLink_T:1.0",
                 "TopologicalLink_T",
                 [{"name",
                   {tk_sequence,
                       {tk_struct,
                           "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                           "NameAndStringValue_T",
                           [{"name",{tk_string,0}},{"value",{tk_string,0}}]},
                       0}},
                  {"userLabel",{tk_string,0}},
                  {"nativeEMSName",{tk_string,0}},
                  {"owner",{tk_string,0}},
                  {"direction",
                   {tk_enum,
                       "IDL:mtnm.tmforum.org/globaldefs/ConnectionDirection_T:1.0",
                       "ConnectionDirection_T",
                       ["CD_UNI","CD_BI"]}},
                  {"rate",tk_short},
                  {"aEndTP",
                   {tk_sequence,
                       {tk_struct,
                           "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                           "NameAndStringValue_T",
                           [{"name",{tk_string,0}},{"value",{tk_string,0}}]},
                       0}},
                  {"zEndTP",
                   {tk_sequence,
                       {tk_struct,
                           "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                           "NameAndStringValue_T",
                           [{"name",{tk_string,0}},{"value",{tk_string,0}}]},
                       0}},
                  {"additionalInfo",
                   {tk_sequence,
                       {tk_struct,
                           "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                           "NameAndStringValue_T",
                           [{"name",{tk_string,0}},{"value",{tk_string,0}}]},
                       0}}]}]};
oe_tc(getAllEMSAndMEActiveAlarms) -> 
	{tk_void,
            [{tk_sequence,{tk_string,0},0},
             {tk_sequence,
                 {tk_enum,
                     "IDL:mtnm.tmforum.org/notifications/PerceivedSeverity_T:1.0",
                     "PerceivedSeverity_T",
                     ["PS_INDETERMINATE","PS_CRITICAL","PS_MAJOR","PS_MINOR",
                      "PS_WARNING","PS_CLEARED"]},
                 0},
             tk_ulong],
            [{tk_sequence,
                 {tk_struct,
                     "IDL:omg.org/CosNotification/StructuredEvent:1.0",
                     "StructuredEvent",
                     [{"header",
                       {tk_struct,
                           "IDL:omg.org/CosNotification/EventHeader:1.0",
                           "EventHeader",
                           [{"fixed_header",
                             {tk_struct,
                                 "IDL:omg.org/CosNotification/FixedEventHeader:1.0",
                                 "FixedEventHeader",
                                 [{"event_type",
                                   {tk_struct,
                                       "IDL:omg.org/CosNotification/EventType:1.0",
                                       "EventType",
                                       [{"domain_name",{tk_string,0}},
                                        {"type_name",{tk_string,0}}]}},
                                  {"event_name",{tk_string,0}}]}},
                            {"variable_header",
                             {tk_sequence,
                                 {tk_struct,
                                     "IDL:omg.org/CosNotification/Property:1.0",
                                     "Property",
                                     [{"name",{tk_string,0}},
                                      {"value",tk_any}]},
                                 0}}]}},
                      {"filterable_data",
                       {tk_sequence,
                           {tk_struct,
                               "IDL:omg.org/CosNotification/Property:1.0",
                               "Property",
                               [{"name",{tk_string,0}},{"value",tk_any}]},
                           0}},
                      {"remainder_of_body",tk_any}]},
                 0},
             {tk_objref,
                 "IDL:mtnm.tmforum.org/notifications/EventIterator_I:1.0",
                 "EventIterator_I"}]};
oe_tc(getAllEMSSystemActiveAlarms) -> 
	{tk_void,
            [{tk_sequence,
                 {tk_enum,
                     "IDL:mtnm.tmforum.org/notifications/PerceivedSeverity_T:1.0",
                     "PerceivedSeverity_T",
                     ["PS_INDETERMINATE","PS_CRITICAL","PS_MAJOR","PS_MINOR",
                      "PS_WARNING","PS_CLEARED"]},
                 0},
             tk_ulong],
            [{tk_sequence,
                 {tk_struct,
                     "IDL:omg.org/CosNotification/StructuredEvent:1.0",
                     "StructuredEvent",
                     [{"header",
                       {tk_struct,
                           "IDL:omg.org/CosNotification/EventHeader:1.0",
                           "EventHeader",
                           [{"fixed_header",
                             {tk_struct,
                                 "IDL:omg.org/CosNotification/FixedEventHeader:1.0",
                                 "FixedEventHeader",
                                 [{"event_type",
                                   {tk_struct,
                                       "IDL:omg.org/CosNotification/EventType:1.0",
                                       "EventType",
                                       [{"domain_name",{tk_string,0}},
                                        {"type_name",{tk_string,0}}]}},
                                  {"event_name",{tk_string,0}}]}},
                            {"variable_header",
                             {tk_sequence,
                                 {tk_struct,
                                     "IDL:omg.org/CosNotification/Property:1.0",
                                     "Property",
                                     [{"name",{tk_string,0}},
                                      {"value",tk_any}]},
                                 0}}]}},
                      {"filterable_data",
                       {tk_sequence,
                           {tk_struct,
                               "IDL:omg.org/CosNotification/Property:1.0",
                               "Property",
                               [{"name",{tk_string,0}},{"value",tk_any}]},
                           0}},
                      {"remainder_of_body",tk_any}]},
                 0},
             {tk_objref,
                 "IDL:mtnm.tmforum.org/notifications/EventIterator_I:1.0",
                 "EventIterator_I"}]};
oe_tc(getObjectRootAlarms) -> 
	{tk_void,
            [{tk_sequence,
                 {tk_struct,
                     "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                     "NameAndStringValue_T",
                     [{"name",{tk_string,0}},{"value",{tk_string,0}}]},
                 0},
             {tk_string,0},
             {tk_string,0},
             tk_ulong],
            [{tk_sequence,
                 {tk_struct,
                     "IDL:omg.org/CosNotification/StructuredEvent:1.0",
                     "StructuredEvent",
                     [{"header",
                       {tk_struct,
                           "IDL:omg.org/CosNotification/EventHeader:1.0",
                           "EventHeader",
                           [{"fixed_header",
                             {tk_struct,
                                 "IDL:omg.org/CosNotification/FixedEventHeader:1.0",
                                 "FixedEventHeader",
                                 [{"event_type",
                                   {tk_struct,
                                       "IDL:omg.org/CosNotification/EventType:1.0",
                                       "EventType",
                                       [{"domain_name",{tk_string,0}},
                                        {"type_name",{tk_string,0}}]}},
                                  {"event_name",{tk_string,0}}]}},
                            {"variable_header",
                             {tk_sequence,
                                 {tk_struct,
                                     "IDL:omg.org/CosNotification/Property:1.0",
                                     "Property",
                                     [{"name",{tk_string,0}},
                                      {"value",tk_any}]},
                                 0}}]}},
                      {"filterable_data",
                       {tk_sequence,
                           {tk_struct,
                               "IDL:omg.org/CosNotification/Property:1.0",
                               "Property",
                               [{"name",{tk_string,0}},{"value",tk_any}]},
                           0}},
                      {"remainder_of_body",tk_any}]},
                 0},
             {tk_objref,
                 "IDL:mtnm.tmforum.org/notifications/EventIterator_I:1.0",
                 "EventIterator_I"}]};
oe_tc(getObjectClockSourceStatus) -> 
	{tk_void,
            [{tk_sequence,
                 {tk_struct,
                     "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                     "NameAndStringValue_T",
                     [{"name",{tk_string,0}},{"value",{tk_string,0}}]},
                 0}],
            [{tk_sequence,
                 {tk_struct,
                     "IDL:mtnm.tmforum.org/emsMgr/ClockSourceStatus_T:1.0",
                     "ClockSourceStatus_T",
                     [{"name",
                       {tk_sequence,
                           {tk_struct,
                               "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                               "NameAndStringValue_T",
                               [{"name",{tk_string,0}},
                                {"value",{tk_string,0}}]},
                           0}},
                      {"nativeEMSName",{tk_string,0}},
                      {"status",{tk_string,0}},
                      {"timingMode",{tk_string,0}},
                      {"quality",{tk_string,0}},
                      {"workingMode",{tk_string,0}},
                      {"additionalInfo",
                       {tk_sequence,
                           {tk_struct,
                               "IDL:mtnm.tmforum.org/globaldefs/NameAndStringValue_T:1.0",
                               "NameAndStringValue_T",
                               [{"name",{tk_string,0}},
                                {"value",{tk_string,0}}]},
                           0}}]},
                 0}]};
oe_tc(acknowledgeAlarms) -> 
	{tk_void,[{tk_sequence,{tk_string,0},0}],
                 [{tk_sequence,{tk_string,0},0}]};
oe_tc(setNativeEMSName) -> common_Common_I:oe_tc(setNativeEMSName);
oe_tc(setUserLabel) -> common_Common_I:oe_tc(setUserLabel);
oe_tc(setOwner) -> common_Common_I:oe_tc(setOwner);
oe_tc(getCapabilities) -> common_Common_I:oe_tc(getCapabilities);
oe_tc(setAdditionalInfo) -> common_Common_I:oe_tc(setAdditionalInfo);
oe_tc(_) -> undefined.

oe_get_interface() -> 
	[{"setAdditionalInfo", common_Common_I:oe_tc(setAdditionalInfo)},
	{"getCapabilities", common_Common_I:oe_tc(getCapabilities)},
	{"setOwner", common_Common_I:oe_tc(setOwner)},
	{"setUserLabel", common_Common_I:oe_tc(setUserLabel)},
	{"setNativeEMSName", common_Common_I:oe_tc(setNativeEMSName)},
	{"acknowledgeAlarms", oe_tc(acknowledgeAlarms)},
	{"getObjectClockSourceStatus", oe_tc(getObjectClockSourceStatus)},
	{"getObjectRootAlarms", oe_tc(getObjectRootAlarms)},
	{"getAllEMSSystemActiveAlarms", oe_tc(getAllEMSSystemActiveAlarms)},
	{"getAllEMSAndMEActiveAlarms", oe_tc(getAllEMSAndMEActiveAlarms)},
	{"getTopLevelTopologicalLink", oe_tc(getTopLevelTopologicalLink)},
	{"getAllTopLevelTopologicalLinkNames", oe_tc(getAllTopLevelTopologicalLinkNames)},
	{"getAllTopLevelTopologicalLinks", oe_tc(getAllTopLevelTopologicalLinks)},
	{"getAllTopLevelSubnetworkNames", oe_tc(getAllTopLevelSubnetworkNames)},
	{"getAllTopLevelSubnetworks", oe_tc(getAllTopLevelSubnetworks)},
	{"getEMS", oe_tc(getEMS)}].




%%------------------------------------------------------------
%%
%% Object server implementation.
%%
%%------------------------------------------------------------


%%------------------------------------------------------------
%%
%% Function for fetching the interface type ID.
%%
%%------------------------------------------------------------

typeID() ->
    "IDL:mtnm.tmforum.org/emsMgr/EMSMgr_I:1.0".


%%------------------------------------------------------------
%%
%% Object creation functions.
%%
%%------------------------------------------------------------

oe_create() ->
    corba:create(?MODULE, "IDL:mtnm.tmforum.org/emsMgr/EMSMgr_I:1.0").

oe_create_link() ->
    corba:create_link(?MODULE, "IDL:mtnm.tmforum.org/emsMgr/EMSMgr_I:1.0").

oe_create(Env) ->
    corba:create(?MODULE, "IDL:mtnm.tmforum.org/emsMgr/EMSMgr_I:1.0", Env).

oe_create_link(Env) ->
    corba:create_link(?MODULE, "IDL:mtnm.tmforum.org/emsMgr/EMSMgr_I:1.0", Env).

oe_create(Env, RegName) ->
    corba:create(?MODULE, "IDL:mtnm.tmforum.org/emsMgr/EMSMgr_I:1.0", Env, RegName).

oe_create_link(Env, RegName) ->
    corba:create_link(?MODULE, "IDL:mtnm.tmforum.org/emsMgr/EMSMgr_I:1.0", Env, RegName).

%%------------------------------------------------------------
%%
%% Init & terminate functions.
%%
%%------------------------------------------------------------

init(Env) ->
%% Call to implementation init
    corba:handle_init(emsMgr_EMSMgr_I_impl, Env).

terminate(Reason, State) ->
    corba:handle_terminate(emsMgr_EMSMgr_I_impl, Reason, State).


%%%% Operation: getEMS
%% 
%%   Returns: RetVal, EmsInfo
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, getEMS, []}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, getEMS, [], OE_State, OE_Context, false, false);

%%%% Operation: getAllTopLevelSubnetworks
%% 
%%   Returns: RetVal, SList, SIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, getAllTopLevelSubnetworks, [How_many]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, getAllTopLevelSubnetworks, [How_many], OE_State, OE_Context, false, false);

%%%% Operation: getAllTopLevelSubnetworkNames
%% 
%%   Returns: RetVal, NameList, NameIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, getAllTopLevelSubnetworkNames, [How_many]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, getAllTopLevelSubnetworkNames, [How_many], OE_State, OE_Context, false, false);

%%%% Operation: getAllTopLevelTopologicalLinks
%% 
%%   Returns: RetVal, TopoList, TopoIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, getAllTopLevelTopologicalLinks, [How_many]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, getAllTopLevelTopologicalLinks, [How_many], OE_State, OE_Context, false, false);

%%%% Operation: getAllTopLevelTopologicalLinkNames
%% 
%%   Returns: RetVal, NameList, NameIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, getAllTopLevelTopologicalLinkNames, [How_many]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, getAllTopLevelTopologicalLinkNames, [How_many], OE_State, OE_Context, false, false);

%%%% Operation: getTopLevelTopologicalLink
%% 
%%   Returns: RetVal, TopoLink
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, getTopLevelTopologicalLink, [TopoLinkName]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, getTopLevelTopologicalLink, [TopoLinkName], OE_State, OE_Context, false, false);

%%%% Operation: getAllEMSAndMEActiveAlarms
%% 
%%   Returns: RetVal, EventList, EventIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, getAllEMSAndMEActiveAlarms, [ExcludeProbCauseList, ExcludeSeverityList, How_many]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, getAllEMSAndMEActiveAlarms, [ExcludeProbCauseList, ExcludeSeverityList, How_many], OE_State, OE_Context, false, false);

%%%% Operation: getAllEMSSystemActiveAlarms
%% 
%%   Returns: RetVal, EventList, EventIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, getAllEMSSystemActiveAlarms, [ExcludeSeverityList, How_many]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, getAllEMSSystemActiveAlarms, [ExcludeSeverityList, How_many], OE_State, OE_Context, false, false);

%%%% Operation: getObjectRootAlarms
%% 
%%   Returns: RetVal, EventList, EventIt
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, getObjectRootAlarms, [ObjectName, StartTime, EndTime, How_many]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, getObjectRootAlarms, [ObjectName, StartTime, EndTime, How_many], OE_State, OE_Context, false, false);

%%%% Operation: getObjectClockSourceStatus
%% 
%%   Returns: RetVal, ClockSourceStatusList
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, getObjectClockSourceStatus, [ManagedElementName]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, getObjectClockSourceStatus, [ManagedElementName], OE_State, OE_Context, false, false);

%%%% Operation: acknowledgeAlarms
%% 
%%   Returns: RetVal, FailedAlarmList
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, acknowledgeAlarms, [AlarmList]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, acknowledgeAlarms, [AlarmList], OE_State, OE_Context, false, false);

%%%% Operation: setNativeEMSName
%% 
%%   Returns: RetVal
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, setNativeEMSName, [ObjectName, NativeEMSName]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, setNativeEMSName, [ObjectName, NativeEMSName], OE_State, OE_Context, false, false);

%%%% Operation: setUserLabel
%% 
%%   Returns: RetVal
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, setUserLabel, [ObjectName, UserLabel, EnforceUniqueness]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, setUserLabel, [ObjectName, UserLabel, EnforceUniqueness], OE_State, OE_Context, false, false);

%%%% Operation: setOwner
%% 
%%   Returns: RetVal
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, setOwner, [ObjectName, Owner]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, setOwner, [ObjectName, Owner], OE_State, OE_Context, false, false);

%%%% Operation: getCapabilities
%% 
%%   Returns: RetVal, Capabilities
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, getCapabilities, []}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, getCapabilities, [], OE_State, OE_Context, false, false);

%%%% Operation: setAdditionalInfo
%% 
%%   Returns: RetVal, AdditionalInfo
%%   Raises:  globaldefs::ProcessingFailureException
%%
handle_call({_, OE_Context, setAdditionalInfo, [ObjectName, AdditionalInfo]}, _, OE_State) ->
  corba:handle_call(emsMgr_EMSMgr_I_impl, setAdditionalInfo, [ObjectName, AdditionalInfo], OE_State, OE_Context, false, false);



%%%% Standard gen_server call handle
%%
handle_call(stop, _, State) ->
    {stop, normal, ok, State};

handle_call(_, _, State) ->
    {reply, catch corba:raise(#'BAD_OPERATION'{minor=1163001857, completion_status='COMPLETED_NO'}), State}.


%%%% Standard gen_server cast handle
%%
handle_cast(stop, State) ->
    {stop, normal, State};

handle_cast(_, State) ->
    {noreply, State}.


%%%% Standard gen_server handles
%%
handle_info(_, State) ->
    {noreply, State}.


code_change(OldVsn, State, Extra) ->
    corba:handle_code_change(emsMgr_EMSMgr_I_impl, OldVsn, State, Extra).

